default namespace = "phenote/config/xml"
##default namespace = "http://phenote/config/xml"

##    attribute version { xsd:float }, -- cant do float 1.0.3 is not a float
start =
  element phenote-configuration {
    attribute version { xsd:string },
    attribute description { xsd:string },
    attribute name { xsd:string },
    attribute author { xsd:string },
    master-to-local-config,
    terminology-definitions,
    log,
    externaldb*,
    dataadapter*,
    uvic-graph,
    term-history,
    auto-update-ontologies,
    update-timer,
    obo-repository,
    autocomplete-settings,
    field*,
    group*,
    data-input-servlet,
    character-mode,
    ontologyLoading,
    field-panel-tabs,
##    comparison, -> field
    constraint*
  }

## specify how the master config interacts with local/cached config
## WIPEOUT master will always wipe out local every run
## UPDATE (default) update/merge master with local
## when is ALWAYS,ON_VERSION_CHANGE,INIT
master-to-local-config = element master-to-local-config {
  attribute mode { xsd:string },
  attribute when { xsd:string },
  attribute overriding-master-url { xsd:string }
}


## rename/add file-dataadapter - keep dataadapter for backward compatibility?
dataadapter =
  element dataadapter {
    ## for now just 2 dataadapters, phenoxml & phenosyntax (and now also nexus)
    ## take out this constraint - make more pluggable easy to add DA
    ##attribute name {"phenoxml" | "phenosyntax" | "nexus"}
    ## actual class name phenote.dataadapter.phenoxml.PhenoXmlAdapter
    attribute name { xsd:string },
    attribute is-queryable { xsd:boolean },
    attribute enable { xsd:boolean }
  }
  
##
externaldb =
 element externaldb {
   attribute name { xsd:string },
   attribute path { xsd:string }
 }


## Where the config file for log4j is
log =
  element log {
    attribute config-file { xsd:string }
  }

## this is where the ontologies will be defined
## and then referred to in the field defs
terminology-definitions = 
  element terminology-definitions {
    ontology-file*,
    attribute update { "NONE" | "SOME" | "ALL" }
}

##this is general enough to use for both ontologies and flat files
ontology-file = 
  element ontology-file {
    ## the shorthand to be referred to in fields
    attribute handle { xsd:string },
    ## the actual name of the file
    attribute filename { xsd:string },
    ##would it be useful to differentiate between OBO and OWL?
    attribute type { "FLAT" | "OBO" | "OWL" },
    ##where to get it from, locally or url
    attribute location { xsd:string },
    ## optional - if user wants specific version, they could specify
    attribute version { xsd:string },
    ## optional - for eventual fetching of non-whole ontologies
    attribute root { xsd:string },
    ## now this is on a per-ontology basis
    attribute auto-update { xsd:boolean }
}

## Weather to enable uvic graphics - not working so well so should stay disabled
uvic-graph = element uvic-graph { attribute enable { xsd:boolean } }

## Whether to enable DataInputServlet - used by SmartAtlas
data-input-servlet = element data-input-servlet {
   attribute enable { xsd:boolean },
   ## which http port to use
   attribute port { xsd:int }
}

term-history = element term-history { attribute enable { xsd:boolean } }

field-panel-tabs = element field-panel-tabs { attribute enable { xsd:boolean } }

## auto-update-ontologies, update-timer should go in here as well... 
## loading screen sometimes can cause threadlock hang, disable it here              
ontologyLoading = element ontologyLoading {
  attribute showLoadingScreen { xsd:boolean }
}

auto-update-ontologies = element auto-update-ontologies { attribute enable { xsd:boolean } }

update-timer = element update-timer { attribute timer {xsd:int} }

autocomplete-settings = element autocomplete-settings {
  attribute term { xsd:boolean },
  attribute synonym { xsd:boolean },
  attribute definition { xsd:boolean },
  attribute obsolete { xsd:boolean }
}

## what implementation of CharacterI to use, CHARACTER or OBO_ANNOTATION
character-mode = element character-mode {
  ## type of character to use
  attribute mode { "CHARACTER" | "OBO_ANNOTATION" },
  ## if using OBO_ANNOTATION, then specify the java mapping class to use
  ## full java class name, eg phenote.datamodel.BasicAnnotationMappingDriver
  attribute mapping { xsd:string }
}

## still working this out but i think this either works in conjunction with
## COMPARISON field or will be phased out for that??
## commenting out for now
## comparison = element comparison { attribute enable-statement-comparison {xsd:boolean} }

## this is pase and should be phased out
obo-repository = element obo-repository { attribute url-dir {xsd:string} }

##this is where we'll define all the ontologies to be used throughout the config
##they'll all be in one nice, neat little place.
##the namespace will still need to be defined for the fields, not in this def.
terminology_definitions = 
  element terminology_definitions {
    file*,
    attribute update { "NONE", "SOME", "ALL" }
  }
  
file = 
  element file {
    ## we'll refer to the ontology name in the fields to get the appropriate file
    attribute name { xsd:string },
    ##so we can use the same xml element for both flat files or ontology files
    ##would it be useful to differentiate OBO, OWL, etc?
    attribute type { "ONTOLOGY" | "TXT" },
    ## the url for the file.  if no url, then only local file
    attribute url { xsd:string },
    ## easy enough to swap in and out different repository locations
##    attribute repository { xsd:string },
    ## optional - if a specific version is desired.
    attribute version { xsd:string },
    ## optional - if a large ontology is desired, then we could grab an
    ## ontology portion starting with this <root> term to the leaves.
    attribute root { xsd:string },
    ## a flag for each individual ontology for whether or not to update automatically
    attribute auto-update { xsd:boolean }
 }

field = 
  element field {
    ## what relation to use in mapping field to obo annotation
    attribute obo-relation { xsd:string },
    ## unclear if enable is needed, if false then field not used, but if user
    ## changed mind could easily bring reenable field, also for merges can
    ## just unenable fields getting wiped out - i like that 
    attribute enable { xsd:boolean },
    attribute name { xsd:string },
    attribute colwidth { xsd:int },
    attribute desc { xsd:string },
    ## tag for field, replaces syntax-abbrev
    attribute datatag { xsd:string },
    ## tag for field for pheno-syntax adapter - replaced by datatag
    attribute syntax-abbrev { xsd:string },
    ## whether field is free text, (ontology)term, int, ID, if obo file is
    ## added term is assumed, otherewise free_text is the default
    ## ID requires a : and no whitespace 
    ## free_text is just for backward compatibility - phase out
    ## COMPARISON is a field to display comparison of char w another char
    ## read only doesnt belong here
    attribute type { "FREE_TEXT" | "TERM" | "INT" | "ID"  | "DATE"| "COMPARISON" 
                     | "AUTO_ANNOT_ID" | "READ_ONLY" | "free_text" },  
    ## if field is required, then commit will fail if null at commit time
    ## (null constraint), warnIfNull similar but gives warning
    attribute isRequired { xsd:boolean },
    ## Same as isRequired but gives user warning message on commit that they
    ## can choose to ignore, where isRequired can be ignored
    attribute warnIfNull { xsd:boolean },
    ## should this be another type? will there be anything readonly aside from strings?
    ##attribute read-only { xsd:boolean },
    attribute tab { xsd:string },
    ## phase these 4 out - redundant with single ontology
    attribute file { xsd:string },
    ## this is pase! dont use, todo: take out of phenote code
    ## attribute filter-out { xsd:string },
    attribute slim { xsd:string },
    attribute repos-subdir {xsd:string},
    attribute groups { xsd:IDREFS }?,
    ## whether to copy the field when character is copied/duplicated
    ## a database id usually shouldnt be copied, default true
    attribute copy-field { xsd:boolean },
    ## the amount of letters/chars a user has to type before completion happens
    ## this is to optimize slow completion w many ontologies 
    ## with new threading optimization this is being phased out, its been disabled
    attribute min-completion-chars { xsd:int },
    # for ontol completion what to sort terms by, default is NAME
    # id sorting is admittedly suspect
    attribute sort-by { "NAME" | "ID" },
    ## if true then field can have multiple values, use list gui
    attribute isList { xsd:boolean },
    attribute isPickList { xsd:boolean },
    attribute componentsGroup { xsd:ID },
    ## whether or not to show field in display, eg dateCreated is not
    ## necasarily displayed
    attribute isVisible { xsd:boolean },
    ## name of another field which this one uses as pick-list source
    attribute pickSource { xsd:string },
    ## if true then give user big popup box activated by button to type
    ## multilines of text - comments, descriptions
    attribute enableBigTextBox { xsd:boolean },

    postcomp?,
    ontology*
  } 

ontology =
  element ontology {
    attribute name { xsd:string },
    ## obo file for ontology - term def ont file replaces this
    attribute file { xsd:string },
    attribute namespace { xsd:string },
    ## filter out replaced by namespace, pase' - phase out
    attribute filter-out { xsd:string },
    attribute slim { xsd:string },
    ## this is pase and should be phased out
    attribute repos-subdir {xsd:string},
    attribute is-postcomp-rel {xsd:boolean},
    ## can list terms to use for a slim of ontol
    onTheFlySlimTerm*
  }

## for ontology - list terms to use for the ontology, and on the fly slim
## so only the terms listed here will be seen by user, not the whole ontology
## this is for simple slims (just a few terms) that you dont wanna bother
## making an obo for, eventually add useKids to include kids
onTheFlySlimTerm = element onTheFlySlimTerm {
  ## id of term for slim
  attribute term { xsd:string }
}
  
 group =
   element group {
     attribute name { xsd:ID },
     attribute container { "window" | "tab" },
     attribute interface { "default" | "character-template" },
     attribute title { xsd:string },
     ## default is false - there is always one character
     attribute allowEmptyCharacters { xsd:boolean },
     ## default is true - if false, this table is only edited inline
     attribute useFieldPanel { xsd:boolean },
     ## group adapter is a plugin that processes data from group and shoves it
     ## in the main/default group (in field values,field name or row data
     ## since its a plugin this should be a full path java class like
     ## phenote.dataadapter.fly.FlyGenotypeGroupAdapter or
     ## phenote.dataadapter.FieldsGroupAdapter
     attribute group_adapter { xsd:string },
     ## which field (in main group) is destination for this group, if its
     ## destiny is a field
     attribute destination_field { xsd:string },
     ## what components to show for group, ie "TermInfo Table Editor" space delim
     attribute show { xsd:IDREFS }?,
     ## number of fields per panel, then make new tab, 0 for all in 1
     attribute fieldsPerPanel { xsd:int }?,
     templatechooser*
  }
  
  templatechooser =
  	element templatechooser {
  	  ## title is for the user interface
  	  attribute title { xsd:string },
  	  ## adapter is class which implement TemplateChooser interface
  	  attribute adapter { xsd:string },
  	  ## field is name of field this chooser works with
  	  ## it really should be an IDREF - that will require refactoring field element and existing configs
  	  attribute field { xsd:string }
  }
  

## Whether to check if ontology(obo) has been updated/more current obo file
## I think this needs to be taken out as replaced by quartz scheduler
##check-for-new-ontologies =
##  element check-for-new-ontologies {
##    attribute intervalMinutes { xsd:integer } }

## hmmmmm - this is funny - is there a need for more than one rel ontol??
## alternatively should this just hold ontology+(1 or more)
## or alternatively just be another ontology with isRel flag and if theres
## an ontology with isRel flag then do post comp (could also have redundant
## isPostComp flag) hmmmm - cleaner but not as intuitive
## isRelForPostComp - more explicit as there may be rels for stage as well
postcomp =
  element postcomp {
    attribute relationship-ontology { xsd:string },
    ## do we need this??
    ontology*
  }

## a constraint is checked at edit or compile time and throws warnings & failures
## constraints are encoded in java classes but are then enlisted here - so the class
## attribute is the actual class name, like "phenote.dataadapter.worm.WormConstraint"
constraint = element constraint { attribute className { xsd:string } }